name: Check and Build Docker Image

on:
#  schedule:
#    - cron: "0 0 * * *"  # Run once per 24h
  workflow_dispatch: # Permet de dÃ©clencher manuellement

jobs:


  check-version-exists:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_check.outputs.version }}
      build_required: ${{ steps.version_check.outputs.build_required }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release file
        run: |
          curl -o release.txt https://releases.quilibrium.com/release

      # Don't build again if build failed previously
      - name: Extract current version and check for existing Git tag
        id: version_check
        run: |
          VERSION=v$(head -n 1 release.txt | grep -oP 'node-\K[\d.]+')
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists. Build not required."
            echo "build_required=false" >> $GITHUB_OUTPUT
          else
            echo "No existing tag $VERSION. Proceeding with build."
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "build_required=true" >> $GITHUB_OUTPUT
          fi

      - name: Check if Docker tag exists
        if: steps.version_check.outputs.build_required == 'true'
        id: tag_check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" \
            https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/ceremonyclient/tags/${{ steps.version_check.outputs.version }})
          if [ "$response" -eq 200 ]; then
            echo "Docker tag already exists. Skipping build."
            echo "build_required=false" >> $GITHUB_OUTPUT
          else
            echo "Docker tag not found. Proceeding with build."
          fi




  build:
    needs: check-version-exists
    if: needs.check-version-exists.outputs.build_required == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release file
        run: |
          curl -o release.txt https://releases.quilibrium.com/release
          echo "version=${{ needs.check-version-exists.outputs.version }}" >> $GITHUB_ENV
          
      - name: Clone the repository
        run: |
          git clone https://github.com/QuilibriumNetwork/ceremonyclient.git
          cd ceremonyclient
          TRANSFORMED_VERSION=$(echo "${{ env.version }}" | sed -E 's/(v[0-9]+\.[0-9]+\.[0-9]+)\.([0-9]+)/\1-p\2/')
          git checkout -b $TRANSFORMED_VERSION

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Task
        uses: arduino/setup-task@v2
      
      - name: Build Docker Image
        run: |
          cd ceremonyclient
          task build_node_amd64_linux
          task build_qclient_amd64_linux
          task build

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Image
        run: |
          cd ceremonyclient
          task push

      #todo: move this up so the job is not run again if an error occured 
      - name: Tag the version in this Git
        run: |
          git tag ${{ env.version }}
          git push origin --tags
