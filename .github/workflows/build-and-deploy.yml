name: Check and Build Docker Image

on:
#  schedule:
#    - cron: "0 0 * * *"  # Run once per 24h
  workflow_dispatch: # Permet de dÃ©clencher manuellement

jobs:


  check-version-exists:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_check.outputs.version }}
      build_required: ${{ steps.version_check.outputs.build_required }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract current version and check for existing Git tag
        id: version_check
        run: |
          curl -o release.txt https://releases.quilibrium.com/release
          VERSION=$(head -n 1 release.txt | grep -oP 'node-\K[\d.]+')
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists. Build not required."
            echo "build_required=false" >> $GITHUB_OUTPUT
          else
            echo "No existing tag v$VERSION. Proceeding with build."
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "build_required=true" >> $GITHUB_OUTPUT
          fi

      - name: Check if Docker tag exists
        if: steps.version_check.outputs.build_required == 'true'
        id: tag_check
        run: |
          VERSION="${{ steps.version_check.outputs.version }}"
          httpCode=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://hub.docker.com/v2/repositories/vapolia/quilibrium/tags/$VERSION")

          echo "HTTP code for tag $VERSION: $httpCode"

          if [ "$httpCode" = "200" ]; then
            echo "Docker tag already exists. Skipping build."
            echo "build_required=false" >> $GITHUB_OUTPUT
          else
            echo "Docker tag not found. Proceeding with build."
          fi




  build:
    needs: check-version-exists
    if: needs.check-version-exists.outputs.build_required == 'true'
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.set_docker_tag.outputs.docker_tag }}
    env:
      VERSION: ${{needs.check-version-exists.outputs.version}}

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from the above job
        run: |
          TRANSFORMED_VERSION=v$(echo "$VERSION" | sed -E 's/([0-9]+\.[0-9]+\.[0-9]+)\.([0-9]+)/\1-p\2/')
          echo "TRANSFORMED_VERSION=$TRANSFORMED_VERSION" >> $GITHUB_ENV
          echo "Using $VERSION from github tag $TRANSFORMED_VERSION"

      #Make sure the job does not run again if an error occured 
      - name: Tag the version in this Git
        if: ${{ github.event_name == 'schedule' }}
        run: |
          git tag v$TRANSFORMED_VERSION
          git push origin --tags

      - name: Clone monorepo
        run: |
          git clone https://github.com/QuilibriumNetwork/monorepo.git
          cd monorepo

          # First, try to checkout the tag
          if git ls-remote --tags origin | grep -q "refs/tags/$TRANSFORMED_VERSION$"; then
            echo "Tag $TRANSFORMED_VERSION exists, checking out tag..."
            git checkout -b $TRANSFORMED_VERSION origin/$TRANSFORMED_VERSION
          else
            echo "Tag $TRANSFORMED_VERSION does not exist, checking for merged PR with name v$VERSION..."

            # Search for merged PR with exact version in title
            PR_DATA=$(curl -s -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/QuilibriumNetwork/monorepo/pulls?state=closed&per_page=100")

            # Find PR with exact matching version in title and get merge commit SHA
            MERGE_SHA=$(echo "$PR_DATA" | jq -r --arg ver "v$VERSION" \
              '.[] | select(.title == $ver and .merged_at != null) | .merge_commit_sha' | head -n 1)

            if [ -z "$MERGE_SHA" ] || [ "$MERGE_SHA" == "null" ]; then
              echo "ERROR: No tag $TRANSFORMED_VERSION found and no merged PR with version v$VERSION exists."
              echo "Missing version: v$VERSION (tag format: $TRANSFORMED_VERSION)"
              exit 1
            fi

            echo "Found merged PR for v$VERSION at commit $MERGE_SHA"
            git checkout $MERGE_SHA
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Go Task
        uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Display infos
        run: |
          cd monorepo
          task status

      - name: Download node and qclient server binaries in /node and /client
        run: |
          FILE="release.txt"
          BASE_URL="https://releases.quilibrium.com"
          DEST_DIR="node"

          cd monorepo
          curl -o $FILE https://releases.quilibrium.com/release

          grep "linux-amd64" "$FILE" | while IFS= read -r line || [ -n "$line" ]; do
              URL="$BASE_URL/$line"
              DEST_FILE=$(echo "$line" | sed -E 's/(node-)([0-9]+\.[0-9]+\.[0-9]+)\.[0-9]+(-linux-amd64.*)/\1\2\3/')
              DEST_FILE="$DEST_DIR/$DEST_FILE"
              
              echo "Downloading $URL to $DEST_FILE"
              curl -s -o "$DEST_FILE" "$URL"
              
              if [ $? -ne 0 ]; then
                echo "Error downloading";
                #exit 1;
              fi
          done

          DEST_DIR="client"
          grep "linux-amd64" "$FILE" | while IFS= read -r line || [ -n "$line" ]; do
              qclient=$(echo "$line" | sed 's/node/qclient/')
              URL="$BASE_URL/$qclient"
              DEST_FILE=$(echo "$qclient" | sed -E 's/(qclient-)([0-9]+\.[0-9]+\.[0-9]+)\.[0-9]+(-linux-amd64.*)/\1\2\3/')
              DEST_FILE="$DEST_DIR/$DEST_FILE"
          
              echo "Downloading $URL to $DEST_FILE"
              curl -s -o "$DEST_FILE" "$URL"
          
              if [ $? -ne 0 ]; then
                echo "Error downloading";
                #exit 1;
              fi
          done
          
          version=$(awk -F'-' 'NR==1 {split($2, v, "."); print v[1]"."v[2]"."v[3]}' release.txt)
          chmod +x "node/node-$version-linux-amd64"
          chmod +x "client/qclient-$version-linux-amd64"

      - name: Build Image
        run: |
          cd monorepo

          sed -i '1s/.*/FROM golang:1.23.3-alpine3.20 AS build/' Dockerfile.release
          sed -i 's|RUN go build -o qclient ./main.go|RUN cp "qclient-\${NODE_VERSION}-linux-amd64" "qclient"|' Dockerfile.release
          sed -i 's/FROM alpine:3.19/FROM debian:bookworm-slim/' Dockerfile.release
          task build

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Image to Docker Hub
        run: |
          cd monorepo
          docker tag quilibrium:release "vapolia/quilibrium:latest"
          docker tag quilibrium:release "vapolia/quilibrium:$VERSION"
          docker tag quilibrium:release "vapolia/quilibrium:$TRANSFORMED_VERSION"
          docker push --all-tags vapolia/quilibrium

      - name: Set Docker tag output
        id: set_docker_tag
        run: |
          echo "docker_tag=$VERSION" >> $GITHUB_OUTPUT

#docker run -it --entrypoint /bin/sh vapolia/quilibrium:2.0.4
# docker run -it --name testquil --entrypoint bash 1bcc1d5bebf2
# docker ps -a
# docker rm testquil
# docker images
# docker rmi HASH_HASH -f
# cd /usr/local/bin/
# docker push --all-tags vapolia/quilibrium


  update:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Kubeconfig
        run: |
          mkdir $HOME/.kube
          echo "${{ secrets.VAPOLIA_KUBECONFIG }}" >> $HOME/.kube/config

      - name: Upgrade Helm release
        run: |
          helm upgrade -n vapolia quilibrium helm/quilibrium --install \
            --set persistence.existingClaim=quilibrium \
            --set service.annotations."metallb\.universe\.tf/allow-shared-ip"=vapolia \
            --set image.tag=${{ needs.build.outputs.docker_tag }}
